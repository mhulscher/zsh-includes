#!/usr/bin/env perl

use strict;
use warnings;

use JSON;
use Math::Round;
use Text::ASCIITable;

my $data  = decode_json(`kubectl get nodes -o json | jq -Mc .`);
my $usage = `kubectl top pods --all-namespaces | sed 1d | awk 'BEGIN {pods=0;cpu=0;mem=0;} { pods+=1;cpu+=\$3;mem+=\$4 } END {print cpu " " mem " " pods}'`;

my $node_usage = '-';
my $gpu_usage  = '-';
my ($cpu_usage, $mem_usage, $pod_usage) = split(/\s+/, $usage);

$cpu_usage = nearest(1, $cpu_usage / 1000);
$mem_usage = nearest(1, $mem_usage / 1024) . "G";

my $cl = Text::ASCIITable->new();
$cl->setCols(qw(- NODES CPU MEM POD GPU));
$cl->setOptions(headingText => 'Cluster Resources');

my $tb = Text::ASCIITable->new();
$tb->setCols('Node','Capacity','Labels','Annotations');
$tb->setOptions(drawRowLine => 1);

my $nodes = 0;
my $cpu   = 0;
my $mem   = 0;
my $pod   = 0;
my $gpu   = 0;

foreach my $node (@{$data->{'items'}}) {
  $cpu += $node->{'status'}{'capacity'}{'cpu'};
  $mem += (map { s/Ki$//; int($_ / 1000000) } $node->{'status'}{'capacity'}{'memory'})[0];
  $pod += $node->{'status'}{'capacity'}{'pods'};
  $gpu += $node->{'status'}{'capacity'}{'alpha.kubernetes.io/nvidia-gpu'};

  $tb->addRow([
      $node->{'metadata'}{'name'} . "\n" .
      join("\n", sort map { "  " . sprintf("%-19s", $_->{'type'}) . ": " . $_->{'status'} } @{$node->{'status'}{'conditions'}}) . "\n" .
      "  Unschedulable      : " . (defined $node->{'spec'}{'unschedulable'} ? "True" : "False"),
      "CPU: " . $node->{'status'}{'capacity'}{'cpu'} . "\n" .
      "MEM: " . (map { s/Ki$//; nearest(0.1, $_ / 1048576) . "Gi" } $node->{'status'}{'capacity'}{'memory'})[0] . "\n" .
      "POD: " . $node->{'status'}{'capacity'}{'pods'} . "\n" .
      "GPU: " . $node->{'status'}{'capacity'}{'alpha.kubernetes.io/nvidia-gpu'},
      join("\n", map { "$_: " . $node->{'metadata'}{'labels'}{$_} } sort keys %{$node->{'metadata'}{'labels'}}),
      join("\n", map { "$_: " . $node->{'metadata'}{'annotations'}{$_} } sort keys %{$node->{'metadata'}{'annotations'}}),
    ]);
}

$cl->addRow('TOTAL', scalar @{$data->{'items'}}, $cpu, $mem . "G", $pod, $gpu);
$cl->addRow('USAGE', $node_usage, $cpu_usage, $mem_usage, $pod_usage, $gpu_usage);
print $cl;
print $tb;
